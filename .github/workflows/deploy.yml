name: Build and Deploy to Production

on:
  push:
    branches: [ "master" ] # Make sure this matches your main branch, e.g., "main" or "master"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Get the code from the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Set up Node.js
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    # 3. Build BOTH applications
    - name: Build Backend & Frontend
      run: |
        npm install
        npm run build  # Build the backend (creates ./dist)
        cd frontend
        npm install
        CI=false npm run build # Build the frontend (creates ./frontend/build)

    # 4. Create the deployment package
    - name: Create Deployment Package
      run: |
        mkdir -p deploy-package/frontend
        cp -R dist ./deploy-package/
        cp package.json ./deploy-package/
        cp package-lock.json ./deploy-package/
        cp ecosystem.config.js ./deploy-package/
        cp -R frontend/build ./deploy-package/frontend/
        cp frontend/package.json ./deploy-package/frontend/
        cp frontend/package-lock.json ./deploy-package/frontend/
        tar -czf deploy-package.tar.gz -C deploy-package .

    # 5. Deploy the package to your server
    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        source: "deploy-package.tar.gz" # <-- CORRECT: Define the source file to upload
        target: "/tmp"                   # <-- CORRECT: Define the destination folder on the server
        script: |
          # The script now runs AFTER the file is uploaded
          cd /var/www/realtyphotoai
          
          # Remove old build folders to ensure a clean deployment
          rm -rf ./dist
          rm -rf ./frontend/build
          
          # Extract the new package from /tmp
          tar -xzf /tmp/deploy-package.tar.gz
          
          # Install production dependencies
          npm ci --omit=dev
          cd frontend
          npm ci --omit=dev
          cd ..

          # Fix permissions
          sudo chown -R www-data:www-data .
          
          # Reload the app with zero downtime
          pm2 reload ecosystem.config.js